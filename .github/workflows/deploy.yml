name: ci-cd

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AWS_REGION: eu-central-1
  AWS_ACCOUNT_ID: "488927146088"
  SERVICE_NAME: goalbuddyone
  ECR_REPO_SERVER: tokosa1-server
  ECR_REPO_CLIENT: tokosa1-client
  DOCKER_DEFAULT_PLATFORM: linux/amd64

jobs:
  test_build_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      # ---------- CLIENT LINT ----------
      - name: Install client deps
        working-directory: client
        run: npm install

      - name: Lint client
        working-directory: client
        run: npm run lint

      # ---------- SERVER TESTS ON NEON + COVERAGE ----------
      - name: Install server deps
        working-directory: server
        run: npm install

      - name: Install psql client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Reset Neon test schema
        env:
          TEST_DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
        run: |
          # Hard reset the public schema to avoid flaky tests between runs
          psql "$TEST_DATABASE_URL" -v ON_ERROR_STOP=1 -c "DROP SCHEMA IF EXISTS public CASCADE;"
          psql "$TEST_DATABASE_URL" -v ON_ERROR_STOP=1 -c "CREATE SCHEMA public;"

      - name: Run migrations on Neon (test)
        working-directory: server
        env:
          NODE_ENV: test
          TEST_DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
        run: npm run migrate:latest

      - name: Test server with coverage (Neon)
        working-directory: server
        env:
          NODE_ENV: test
          TEST_DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
        run: |
          npm run test:coverage || npx vitest run --coverage --run

      - name: Upload server coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: server-coverage
          path: server/coverage

      # ---------- AWS LOGIN ----------
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Ensure ECR repos exist
        shell: bash
        run: |
          aws ecr describe-repositories --repository-names "$ECR_REPO_SERVER" >/dev/null 2>&1 || \
            aws ecr create-repository --repository-name "$ECR_REPO_SERVER"
          aws ecr describe-repositories --repository-names "$ECR_REPO_CLIENT" >/dev/null 2>&1 || \
            aws ecr create-repository --repository-name "$ECR_REPO_CLIENT"

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # ---------- BUILD & PUSH IMAGES ----------
      - name: Build & push SERVER image
        uses: docker/build-push-action@v6
        with:
          context: ./server
          file: server/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_SERVER }}:latest
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_SERVER }}:${{ github.sha }}

      - name: Build & push CLIENT image
        uses: docker/build-push-action@v6
        with:
          context: ./client
          file: client/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_CLIENT }}:latest
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_CLIENT }}:${{ github.sha }}

      # ---------- DEPLOY TO LIGHTSAIL ----------
      - name: Generate Lightsail deployment files
        env:
          DB_URL: ${{ secrets.DATABASE_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        run: |
          cat > containers.json <<EOF
          {
            "server": {
              "image": "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_SERVER }}:latest",
              "ports": { "3000": "HTTP" },
              "environment": {
                "NODE_ENV": "production",
                "PORT": "3000",
                "DATABASE_URL": "${DB_URL}",
                "JWT_SECRET": "${JWT_SECRET}"
              }
            },
            "client": {
              "image": "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_CLIENT }}:latest",
              "ports": { "80": "HTTP" },
              "environment": {
                "API_PROXY_PASS": "http://server:3000"
              }
            }
          }
          EOF

          cat > public-endpoint.json <<EOF
          {
            "containerName": "client",
            "containerPort": 80,
            "healthCheck": {
              "path": "/",
              "intervalSeconds": 15
            }
          }
          EOF

      - name: Deploy to Lightsail
        run: |
          aws lightsail create-container-service-deployment \
            --region "${AWS_REGION}" \
            --service-name "${SERVICE_NAME}" \
            --containers file://containers.json \
            --public-endpoint file://public-endpoint.json
