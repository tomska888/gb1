name: ci-cd

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AWS_REGION: eu-central-1
  AWS_ACCOUNT_ID: "488927146088"
  SERVICE_NAME: goalbuddyone
  ECR_REPO_SERVER: tokosa1-server
  ECR_REPO_CLIENT: tokosa1-client
  DOCKER_DEFAULT_PLATFORM: linux/amd64

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    # PostgreSQL for server tests
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        # Wait until the DB is healthy before starting steps
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=12

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          # Cache based on the server workspace lockfile
          cache-dependency-path: server/package-lock.json

      # Remove the old "Install dependencies (root workspaces)" step

      - name: Install dependencies (server)
        working-directory: server
        run: |
          # Try strict install first; if the lockfile is out of sync, fall back to npm install
          npm ci || npm install

      - name: Create server/.env.test for Vitest
        working-directory: server
        run: |
          cat > .env.test <<'EOF'
          NODE_ENV=test
          DATABASE_URL=postgresql://neondb_owner:npg_ELnZQ0sk1cMD@ep-small-wind-a2oq6jyu-pooler.eu-central-1.aws.neon.tech/neondb?sslmode=require&channel_binding=require
          JWT_SECRET=your-super-secret-key-that-is-long-and-random
          EOF

      - name: Run server tests with coverage (serial to avoid cross-talk)
        working-directory: server
        run: npm run test:coverage --silent

      - name: Enforce 90% coverage threshold
        working-directory: server
        run: |
          if [ ! -f coverage/coverage-summary.json ]; then
            echo "coverage-summary.json not found" >&2
            exit 1
          fi
          python3 - <<'PY'
          import json, sys
          s = json.load(open('coverage/coverage-summary.json'))['total']
          vals = {k: float(s[k]['pct']) for k in ('lines','branches','functions','statements')}
          print("Coverage:", vals)
          if any(v < 90.0 for v in vals.values()):
              print("❌ Coverage threshold (<90%) not met.", file=sys.stderr)
              sys.exit(1)
          print("✅ Coverage threshold met.")
          PY

      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: server-coverage
          path: server/coverage
          if-no-files-found: warn
          retention-days: 7

      # ---- Build & push only if tests/coverage passed ----

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Ensure ECR repos exist
        shell: bash
        run: |
          aws ecr describe-repositories --repository-names "$ECR_REPO_SERVER" >/dev/null 2>&1 || \
            aws ecr create-repository --repository-name "$ECR_REPO_SERVER"
          aws ecr describe-repositories --repository-names "$ECR_REPO_CLIENT" >/dev/null 2>&1 || \
            aws ecr create-repository --repository-name "$ECR_REPO_CLIENT"

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & push SERVER image
        uses: docker/build-push-action@v6
        with:
          context: ./server
          file: server/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_SERVER }}:latest
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_SERVER }}:${{ github.sha }}

      - name: Build & push CLIENT image
        uses: docker/build-push-action@v6
        with:
          context: ./client
          file: client/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_CLIENT }}:latest
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_CLIENT }}:${{ github.sha }}

      - name: Generate Lightsail deployment files
        env:
          DB_URL: ${{ secrets.DATABASE_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          SERVICE_NAME: ${{ env.SERVICE_NAME }}
        run: |
          INTERNAL_SERVER_URL="http://${SERVICE_NAME}.service.local:3000"

          cat > containers.json <<EOF
          {
            "server": {
              "image": "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_SERVER }}:latest",
              "ports": { "3000": "HTTP" },
              "environment": {
                "NODE_ENV": "production",
                "PORT": "3000",
                "DATABASE_URL": "${DB_URL}",
                "JWT_SECRET": "${JWT_SECRET}"
              }
            },
            "client": {
              "image": "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_CLIENT }}:latest",
              "ports": { "80": "HTTP" },
              "environment": {
                "API_PROXY_PASS": "${INTERNAL_SERVER_URL}"
              }
            }
          }
          EOF

          cat > public-endpoint.json <<EOF
          {
            "containerName": "client",
            "containerPort": 80,
            "healthCheck": {
              "path": "/api/health",
              "intervalSeconds": 15
            }
          }
          EOF

      - name: Deploy to Lightsail
        run: |
          aws lightsail create-container-service-deployment \
            --region "${AWS_REGION}" \
            --service-name "${SERVICE_NAME}" \
            --containers file://containers.json \
            --public-endpoint file://public-endpoint.json
