name: ci-cd

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  AWS_REGION: eu-central-1
  AWS_ACCOUNT_ID: "488927146088"
  SERVICE_NAME: goalbuddyone
  ECR_REPO_SERVER: tokosa1-server
  ECR_REPO_CLIENT: tokosa1-client
  DOCKER_DEFAULT_PLATFORM: linux/amd64

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- TEST + COVERAGE (server) ----------
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies (workspaces)
        run: npm install

      - name: Run ESLint
        run: npm run lint:fix

      # Use Neon TEST DB for migrations (expose as BOTH TEST_DATABASE_URL and DATABASE_URL)
      - name: Run server migrations (test DB)
        working-directory: server
        env:
          NODE_ENV: test
          TEST_DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
          DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
          JWT_SECRET: test-secret
        run: npm run migrate

      - name: Install jq (for coverage gate)
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Run server tests (coverage)
        working-directory: server
        env:
          NODE_ENV: test
          TEST_DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
          DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
          JWT_SECRET: your-super-secret-key-that-is-long-and-random
        run: |
              npm run test:coverage -- --coverage.reporter=json-summary --testTimeout=20000 --hookTimeout=20000

      - name: Enforce 90% minimum coverage
        working-directory: server
        shell: bash
        run: |
          SUMMARY=coverage/coverage-summary.json
          test -f "$SUMMARY" || { echo "Coverage summary not found"; exit 1; }
          echo "Coverage summary:" && cat "$SUMMARY"

          MIN_LINES=90
          MIN_STMTS=90
          MIN_FUNCS=90

          LINES=$(jq '.total.lines.pct' "$SUMMARY")
          STMTS=$(jq '.total.statements.pct' "$SUMMARY")
          FUNCS=$(jq '.total.functions.pct' "$SUMMARY")
          echo "lines=$LINES, statements=$STMTS, functions=$FUNCS (min=${MIN_LINES}/${MIN_STMTS}/${MIN_FUNCS})"

          FAIL=0
          awk -v v="$LINES" -v m="$MIN_LINES" 'BEGIN{ if (v+0 < m) { print "❌ Lines below threshold:", v, "<", m; exit 1 } }' || FAIL=1
          awk -v v="$STMTS" -v m="$MIN_STMTS" 'BEGIN{ if (v+0 < m) { print "❌ Statements below threshold:", v, "<", m; exit 1 } }' || FAIL=1
          awk -v v="$FUNCS" -v m="$MIN_FUNCS" 'BEGIN{ if (v+0 < m) { print "❌ Functions below threshold:", v, "<", m; exit 1 } }' || FAIL=1

          if [ "$FAIL" -ne 0 ]; then
            echo "Coverage gate failed."
            exit 1
          fi
          echo "✅ Coverage gate passed."

      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: server-coverage
          path: server/coverage

      # ---------- BUILD & DEPLOY ----------
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Ensure ECR repos exist
        shell: bash
        run: |
          aws ecr describe-repositories --repository-names "$ECR_REPO_SERVER" >/dev/null 2>&1 || \
            aws ecr create-repository --repository-name "$ECR_REPO_SERVER"
          aws ecr describe-repositories --repository-names "$ECR_REPO_CLIENT" >/dev/null 2>&1 || \
            aws ecr create-repository --repository-name "$ECR_REPO_CLIENT"

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & push SERVER image
        uses: docker/build-push-action@v6
        with:
          context: ./server
          file: server/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_SERVER }}:latest
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_SERVER }}:${{ github.sha }}

      - name: Build & push CLIENT image
        uses: docker/build-push-action@v6
        with:
          context: ./client
          file: client/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_CLIENT }}:latest
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_CLIENT }}:${{ github.sha }}

      - name: Generate Lightsail deployment files
        env:
          DB_URL: ${{ secrets.DATABASE_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          SERVICE_NAME: ${{ env.SERVICE_NAME }}
        run: |
          INTERNAL_SERVER_URL="http://${SERVICE_NAME}.service.local:3000"

          cat > containers.json <<EOF
          {
            "server": {
              "image": "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_SERVER }}:latest",
              "ports": { "3000": "HTTP" },
              "environment": {
                "NODE_ENV": "production",
                "PORT": "3000",
                "DATABASE_URL": "${DB_URL}",
                "JWT_SECRET": "${JWT_SECRET}"
              }
            },
            "client": {
              "image": "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_CLIENT }}:latest",
              "ports": { "80": "HTTP" },
              "environment": {
                "API_PROXY_PASS": "${INTERNAL_SERVER_URL}"
              }
            }
          }
          EOF

          cat > public-endpoint.json <<EOF
          {
            "containerName": "client",
            "containerPort": 80,
            "healthCheck": {
              "path": "/api/health",
              "intervalSeconds": 15
            }
          }
          EOF

      - name: Deploy to Lightsail
        run: |
          aws lightsail create-container-service-deployment \
            --region "${AWS_REGION}" \
            --service-name "${SERVICE_NAME}" \
            --containers file://containers.json \
            --public-endpoint file://public-endpoint.json
