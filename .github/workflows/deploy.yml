name: ci-cd

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  AWS_REGION: eu-central-1
  AWS_ACCOUNT_ID: "488927146088"
  SERVICE_NAME: goalbuddyone
  ECR_REPO_SERVER: tokosa1-server
  ECR_REPO_CLIENT: tokosa1-client
  DOCKER_DEFAULT_PLATFORM: linux/amd64

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- TEST + COVERAGE (server) ----------
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies (workspaces)
        run: npm install

      - name: Run ESLint
        run: npm run lint:fix

      - name: Run server migrations (test DB)
        working-directory: server
        env:
          NODE_ENV: test
          TEST_DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
          DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
          JWT_SECRET: test-secret
        run: npm run migrate

      - name: Install jq (for coverage gate)
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Run server tests (coverage)
        working-directory: server
        env:
          NODE_ENV: test
          TEST_DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
          DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
          JWT_SECRET: your-super-secret-key-that-is-long-and-random
        run: |
          npm run test:coverage -- --coverage.reporter=json-summary --testTimeout=20000 --hookTimeout=20000

      - name: Enforce 90% minimum coverage
        working-directory: server
        shell: bash
        run: |
          SUMMARY=coverage/coverage-summary.json
          test -f "$SUMMARY" || { echo "Coverage summary not found"; exit 1; }
          echo "Coverage summary:" && cat "$SUMMARY"

          MIN_LINES=90
          MIN_STMTS=90
          MIN_FUNCS=90

          LINES=$(jq '.total.lines.pct' "$SUMMARY")
          STMTS=$(jq '.total.statements.pct' "$SUMMARY")
          FUNCS=$(jq '.total.functions.pct' "$SUMMARY")
          echo "lines=$LINES, statements=$STMTS, functions=$FUNCS (min=${MIN_LINES}/${MIN_STMTS}/${MIN_FUNCS})"

          FAIL=0
          awk -v v="$LINES" -v m="$MIN_LINES" 'BEGIN{ if (v+0 < m) { print "❌ Lines below threshold:", v, "<", m; exit 1 } }' || FAIL=1
          awk -v v="$STMTS" -v m="$MIN_STMTS" 'BEGIN{ if (v+0 < m) { print "❌ Statements below threshold:", v, "<", m; exit 1 } }' || FAIL=1
          awk -v v="$FUNCS" -v m="$MIN_FUNCS" 'BEGIN{ if (v+0 < m) { print "❌ Functions below threshold:", v, "<", m; exit 1 } }' || FAIL=1

          if [ "$FAIL" -ne 0 ]; then
            echo "Coverage gate failed."
            exit 1
          fi
          echo "✅ Coverage gate passed."

      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: server-coverage
          path: server/coverage

      - name: Build server (for runtime)
        working-directory: server
        run: npm run build

      - name: Start server (test DB)
        working-directory: server
        env:
            NODE_ENV: production
            DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
            JWT_SECRET: your-super-secret-key-that-is-long-and-random
            PORT: 3000
            HOST: 0.0.0.0
            CORS_ORIGIN: http://localhost:5174
        run: |
            set -euo pipefail

            echo "Node: $(node -v)  npm: $(npm -v)"
            if [ ! -f dist/index.js ]; then
            echo "❌ dist/index.js not found"; ls -la dist || true; exit 1
            fi

            node dist/index.js > ../server.out.log 2>&1 &
            echo $! > ../server.pid
            echo "Server PID: $(cat ../server.pid)"

            for i in {1..60}; do
            if ! kill -0 "$(cat ../server.pid)" 2>/dev/null; then
                echo "❌ Server died while starting. Last log:"; tail -n 200 ../server.out.log || true; exit 1
            fi

            if curl -sf http://localhost:3000/api/health >/dev/null 2>&1 || \
                curl -sf http://localhost:3000/health >/dev/null 2>&1; then
                echo "✅ Server is up."
                exit 0
            fi

            echo "… waiting for server ($i/60)"; sleep 2
            if [ $((i % 5)) -eq 0 ]; then echo "--- tail logs ---"; tail -n 40 ../server.out.log || true; fi
            done

            echo "❌ Timed out waiting for server health. Full log:"
            sed -n '1,200p' ../server.out.log || true
            exit 1

      - name: Build client (SPA)
        working-directory: client
        run: npm run build

      - name: Start client (SPA + proxy /api -> localhost:3000)
        working-directory: client
        env:
          PORT: 5174
          API_PROXY_PASS: http://localhost:3000
        run: |
          node server.js > ../client.out.log 2>&1 &
          echo $! > ../client.pid
          # wait for SPA
          until curl -sf http://localhost:5174 >/dev/null; do
            echo "waiting for client..."
            sleep 1
          done
          echo "Client is up."

      - name: Install Playwright browsers
        working-directory: client
        run: npx playwright install --with-deps chromium

      - name: Run e2e tests
        working-directory: client
        env:
          E2E_BASE_URL: http://localhost:5174
        run: npm run test:e2e

      - name: Upload Playwright report (if failed)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: client/playwright-report

      - name: Upload server/client logs (if failed)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: app-logs
          path: |
            server.out.log
            client.out.log

      - name: Stop apps
        if: always()
        run: |
          kill $(cat server.pid) 2>/dev/null || true
          kill $(cat client.pid) 2>/dev/null || true
          pkill -f "node dist/index.js" 2>/dev/null || true
          pkill -f "client/server.js" 2>/dev/null || true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Ensure ECR repos exist
        shell: bash
        run: |
          aws ecr describe-repositories --repository-names "$ECR_REPO_SERVER" >/dev/null 2>&1 || \
            aws ecr create-repository --repository-name "$ECR_REPO_SERVER"
          aws ecr describe-repositories --repository-names "$ECR_REPO_CLIENT" >/dev/null 2>&1 || \
            aws ecr create-repository --repository-name "$ECR_REPO_CLIENT"

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & push SERVER image
        uses: docker/build-push-action@v6
        with:
          context: ./server
          file: server/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_SERVER }}:latest
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_SERVER }}:${{ github.sha }}

      - name: Build & push CLIENT image
        uses: docker/build-push-action@v6
        with:
          context: ./client
          file: client/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_CLIENT }}:latest
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_CLIENT }}:${{ github.sha }}

      - name: Generate Lightsail deployment files
        env:
          DB_URL: ${{ secrets.DATABASE_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          SERVICE_NAME: ${{ env.SERVICE_NAME }}
        run: |
          INTERNAL_SERVER_URL="http://${SERVICE_NAME}.service.local:3000"

          cat > containers.json <<EOF
          {
            "server": {
              "image": "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_SERVER }}:latest",
              "ports": { "3000": "HTTP" },
              "environment": {
                "NODE_ENV": "production",
                "PORT": "3000",
                "DATABASE_URL": "${DB_URL}",
                "JWT_SECRET": "${JWT_SECRET}",
                "ENABLE_EMAIL": "${{ secrets.ENABLE_EMAIL }}",
                "SMTP_HOST": "${{ secrets.SMTP_HOST }}",
                "SMTP_PORT": "${{ secrets.SMTP_PORT || '587' }}",
                "SMTP_SECURE": "${{ secrets.SMTP_SECURE || 'false' }}",
                "SMTP_USER": "${{ secrets.SMTP_USER }}",
                "SMTP_PASS": "${{ secrets.SMTP_PASS }}",
                "SMTP_FROM": "${{ secrets.SMTP_FROM }}",
                "PUBLIC_APP_URL": "${{ secrets.PUBLIC_APP_URL }}"
              }
            },
            "client": {
              "image": "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_CLIENT }}:latest",
              "ports": { "80": "HTTP" },
              "environment": {
                "API_PROXY_PASS": "${INTERNAL_SERVER_URL}"
              }
            }
          }
          EOF

          cat > public-endpoint.json <<EOF
          {
            "containerName": "client",
            "containerPort": 80,
            "healthCheck": {
              "path": "/api/health",
              "intervalSeconds": 15
            }
          }
          EOF

      - name: Deploy to Lightsail
        run: |
          aws lightsail create-container-service-deployment \
            --region "${AWS_REGION}" \
            --service-name "${SERVICE_NAME}" \
            --containers file://containers.json \
            --public-endpoint file://public-endpoint.json
